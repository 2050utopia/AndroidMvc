/*
 * Copyright 2015 Kejun Xia
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.text.SimpleDateFormat

// Top-level build file where you can add configuration options common to all sub-projects/modules.
def log4jVersion = '1.7.4'
def logbackAndroidVersion = '1.1.1-1'

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

configurations {
    published
}

def globalVersion = new Version('0.1.3')

allprojects{
    repositories {
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    group = 'com.shipdream'
    version = globalVersion
    status = version.status
}

subprojects {
    if (project.plugins.hasPlugin('java')) {
        dependencies {
            testCompile 'junit:junit:4.+'
            testCompile 'org.mockito:mockito-core:1.9.+'
        }

//        if (project.plugins.hasPlugin('maven')) {
            // manifest.mainAttributes(provider: 'gradle')
//            configurations {
//                published
//            }
//
//            task sourceJar(type: Jar) {
//                from sourceSets.main.allSource
//                classifier = 'sources'
//            }
//
//            task javadocJar(type: Jar, dependsOn: javadoc) {
//                classifier = 'javadoc'
//                from javadoc.destinationDir
//            }
//
//            // Add the sourceJars to non-extractor modules
//            artifacts {
//                published sourceJar
//                published javadocJar
//            }
//        }
    }
}

ext {
    siteUrl = 'https://github.com/kejunxia/AndroidMvc'      // Homepage URL of the library
    gitUrl = 'https://github.com/kejunxia/AndroidMvc.git'   // Git repository URL

    maven = [
            groupId: 'com.shipdream.lib.android-mvc',
            version: '0.1.0'
    ]

    androidMinSdkVersion = 14
    androidCompileSdkVersion = 22
    supportLibVersion = "22.2.0"
    androidTargetSdkVersion = androidCompileSdkVersion
    lib = [
            androidSupportLib: "com.android.support:appcompat-v7:$supportLibVersion",
            androidBuildToolVersion: "$androidCompileSdkVersion.0.1",
            mokito: 'org.mockito:mockito-core:1.9.5',
            lombok: 'org.projectlombok:lombok:1.14.6',
            slf4jApi: "org.slf4j:slf4j-api:$log4jVersion",
            slf4jLog: "org.slf4j:slf4j-log4j12:$log4jVersion",
            slf4jJcl: "org.slf4j:jcl-over-slf4j:$log4jVersion",
            logbackAndroidCore: "com.github.tony19:logback-android-core:$logbackAndroidVersion",
            logbackAndroidClassic: "com.github.tony19:logback-android-classic:$logbackAndroidVersion"
    ]
}

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}
